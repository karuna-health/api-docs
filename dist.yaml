openapi: 3.0.2
info:
  version: 1.0.0
  title: Karuna API
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
  contact:
    name: Karuna Health API Support
    email: antares@meetkaruna.com
    url: 'https://www.meetkaruna.com/'
  x-logo:
    url: 'https://karuna-health.github.io/api-docs/logo.png'
  description: >
    # Integrating with Karuna

    ## Overview

    Karuna's platform allows care providers to interact with patients in simple,
    intuitive ways. Patients can have conversations with their care providers
    using tools and channels they already have access to (phone calls, SMS,
    email, etc.), and care providers can see all of these conversations in a
    single shared inbox for each patient.  


    Karuna's APIs expose a broad set of platform functionality, and can be used
    to build out deep integrations.

    ## Core Concepts

    ### Patients

    Patients in Karuna represent the end users of the system. To patients,
    Karuna's platform is invisible. A patient can use Karuna's platform to
    communicate with members of their care team using different Channels they
    already have access to (e.g., phone calls, SMS, email, etc.).

    ### Navigators

    Navigators are the care providers who provide services to their patients. A
    navigator can participate in conversations with their patients using
    Karuna's platform, and have all of their interactions via different channels
    represented in a single shared inbox per patient.

    ### Care Teams

    Navigators and Patients are connected to each other in Karuna via Care
    Teams. A Care Team Member represents a single relationship between a
    Navigator and a Patient. This allows Navigators to have multiple Patients,
    and for a Patient to have multiple Navigators.

    ### Channels

    A Channel in Karuna represents a contact method for a given Patient.
    Patients can have multiple Channels of different types (sources),
    representing different ways messages can flow to and from a Patient. For
    example, a given Patient's channels might include a landline, a cell phone
    number, and two email addresses.

    ### Interactions

    An Interaction in Karuna represents a high-level unit of communication
    between a Navigator and Patient, as seen by the Navigator. If a Navigator
    wants to send an SMS to a Patient, they will create an Interaction
    representing the intent to deliver this message to the Patient via
    particular patient Channel. Karuna's platform will then translate the
    Interaction into an actual Message which will get delivered to the Patient
    via the correct Channel. Similarly, an incoming Message from a Patient will
    have an associated Interaction created post-hoc.


    Interactions represent all possible conceptual interactions between Patients
    and Navigators on Karuna's platform, including phone calls, missed calls,
    SMS messages, emails, etc.

    ### Messages

    A message represents an actual instance of a delivered or received message
    on Karuna's platform. Messages can be created via Interactions (if
    originated on Karuna's platform and delivered outbound to the Patient), or
    they can be created via an incoming response from a Patient.
servers:
  - url: 'https:asdf'
    description: Development server
  - url: 'https:asdf2'
    description: Production server
tags:
  - name: User Tokens
    description: These endpoints allow you to obtain a `user_token` and check its validity.
  - name: Echo
    description: These endpoints allow you to obtain a `user_token` and check its validity.
  - name: User
    description: These endpoints allow you to obtain a `user_token` and check its validity.
paths:
  /tokens/check:
    get:
      tags:
        - User Tokens
      operationId: tokenCheck
      summary: Token validity
      description: >-
        Checks the validity of a short-lived or lifetime `user_token`, as
        specified in the `X-User-Token` header.
      security:
        - user_token: []
          service_token: []
      responses:
        '200':
          description: Valid `service_token` AND `user_token`
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    description: Kind of entity owning the user token
                    type: string
                    enum:
                      - patient
                      - navigator
                  identifier:
                    description: Entity's unique identifier
                    type: string
                  organization:
                    description: Organization to which the entity belongs
                    type: string
              example:
                kind: navigator
                identifier: '21348'
                organization: karuna
        '401':
          description: Invalid `service_token` OR `user_token`
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    description: Type of error
                    type: string
                  error_code:
                    description: Error code
                    type: number
                  message:
                    description: Token that was verified as invalid
                    type: string
              example:
                error: bad_user_token
                error_code: 7943
                message: asdasdf-sdf234-422g
  '/users/{username}':
    parameters:
      - name: pretty_print
        in: query
        description: Pretty print response
        schema:
          type: boolean
    get:
      tags:
        - User
      summary: Get user by user name
      description: |
        Some description of the operation. 
        You can use `markdown` here.
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched
          required: true
          schema:
            type: string
        - name: with_email
          in: query
          description: Filter users without email
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                username: user1
                email: user@example.com
        '403':
          description: Forbidden
        '404':
          description: User not found
    put:
      tags:
        - User
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be updated
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
  /echo:
    post:
      tags:
        - Echo
      summary: Echo test
      description: Receive the exact message you've sent
      operationId: echo
      responses:
        '200':
          description: OK
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              $ref: '#/components/headers/ExpiresAfter'
          content:
            application/json:
              schema:
                type: string
              examples:
                response:
                  value: Hello world!
            application/xml:
              schema:
                type: string
            text/csv:
              schema:
                type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: Hello world!
          application/xml:
            schema:
              type: string
              example: Hello world!
        description: Echo payload
        required: true
components:
  securitySchemes:
    user_token:
      type: apiKey
      in: header
      name: X-User-Token
      description: >-
        A token identifying the user making the request. You can obtain this
        token with a `service_token` and the correct credentials.
    service_token:
      type: apiKey
      in: header
      name: X-Service-Token
      description: >-
        A token identifying the service or organization making the request. This
        token is global to your organization, and will be provided to you by
        Karuna.
  schemas:
    Email:
      description: User email address
      type: string
      format: test
      example: john.smith@example.com
    User:
      type: object
      properties:
        username:
          description: User supplied username
          type: string
          minLength: 4
          example: John78
        firstName:
          description: User first name
          type: string
          minLength: 1
          example: John
        lastName:
          description: User last name
          type: string
          minLength: 1
          example: Smith
        email:
          $ref: '#/components/schemas/Email'
  headers:
    ExpiresAfter:
      description: date in UTC when token expires
      schema:
        type: string
        format: date-time
