openapi: 3.0.2
info:
  version: 1.0.0
  title: Karuna API
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  contact:
    name: Karuna Health API Support
    email: antares@meetkaruna.com
    url: "https://www.meetkaruna.com/"
  x-logo:
    url: "https://karuna-health.github.io/api-docs/logo.png"
  description: >
    # Integrating with Karuna

    ## Overview

    Karuna's platform allows care providers to interact with patients in simple,
    intuitive ways. Patients can have conversations with their care providers
    using tools and channels they already have access to (phone calls, SMS,
    email, etc.), and care providers can see all of these conversations in a
    single shared inbox for each patient.  


    Karuna's APIs expose a broad set of platform functionality, and can be used
    to build out deep integrations.

    ## Core Concepts

    ### Patients

    Patients in Karuna represent the end users of the system. To patients,
    Karuna's platform is invisible. A patient can use Karuna's platform to
    communicate with members of their care team using different Channels they
    already have access to (e.g., phone calls, SMS, email, etc.).

    # Introduction

    ## something else

    This API definition is intended to to be a good starting point for
    describing your API in 

    [OpenAPI/Swagger
    format](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md).

    It also demonstrates features of
    [create-openapi-repo](https://github.com/Redocly/create-openapi-repo) tool
    and 

    [Redoc](https://github.com/Redocly/Redoc) documentation engine. So beyond
    the standard OpenAPI syntax we use a few 

    [vendor
    extensions](https://github.com/Redocly/Redoc/blob/master/docs/redoc-vendor-extensions.md).


    # OpenAPI Specification

    The goal of The OpenAPI Specification is to define a standard,
    language-agnostic interface to REST APIs which

    allows both humans and computers to discover and understand the capabilities
    of the service without access to source

    code, documentation, or through network traffic inspection. When properly
    defined via OpenAPI, a consumer can 

    understand and interact with the remote service with a minimal amount of
    implementation logic. Similar to what

    interfaces have done for lower-level programming, OpenAPI removes the
    guesswork in calling the service.
tags:
  - name: Echo
    description: Example echo operations
  - name: User
    description: Operations about user
servers:
  - url: "http://example.com/api/v1"
  - url: "https://example.com/api/v1"
paths:
  "/users/{username}":
    $ref: "paths/users/{username}.yaml"
  /echo:
    $ref: paths/echo.yaml
components:
  securitySchemes:
    main_auth:
      $ref: "components/securitySchemes/main_auth.yaml"
    api_key:
      $ref: "components/securitySchemes/api_key.yaml"
    basic_auth:
      $ref: "components/securitySchemes/basic_auth.yaml"
